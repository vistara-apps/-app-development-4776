// AI API integration for Virtual Try-On functionality
import { toast } from 'react-hot-toast'

const AI_API_KEY = import.meta.env.VITE_AI_API_KEY
const AI_API_ENDPOINT = import.meta.env.VITE_AI_API_ENDPOINT || 'https://api.openai.com/v1'
const CUSTOM_AI_ENDPOINT = import.meta.env.VITE_CUSTOM_AI_ENDPOINT

// Helper function to convert file to base64
const fileToBase64 = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result)
    reader.onerror = error => reject(error)
  })
}

// Helper function to convert data URL to blob
const dataURLtoBlob = (dataURL) => {
  const arr = dataURL.split(',')
  const mime = arr[0].match(/:(.*?);/)[1]
  const bstr = atob(arr[1])
  let n = bstr.length
  const u8arr = new Uint8Array(n)
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }
  return new Blob([u8arr], { type: mime })
}

// Generate virtual try-on using AI API
export const generateVirtualTryOn = async (userPhoto, productData, options = {}) => {
  if (!AI_API_KEY && !CUSTOM_AI_ENDPOINT) {
    throw new Error('AI API configuration is missing. Please check your environment variables.')
  }

  try {
    // Convert user photo to appropriate format
    let userImageData
    if (typeof userPhoto === 'string') {
      // If it's a data URL, convert to blob
      userImageData = dataURLtoBlob(userPhoto)
    } else {
      // If it's a file, use directly
      userImageData = userPhoto
    }

    // Prepare the request payload
    const formData = new FormData()
    formData.append('user_image', userImageData, 'user_photo.jpg')
    formData.append('product_image_url', productData.image)
    formData.append('product_name', productData.name)
    formData.append('product_category', productData.category || 'clothing')
    
    // Add any additional options
    if (options.style) formData.append('style', options.style)
    if (options.fit_preference) formData.append('fit_preference', options.fit_preference)

    let response
    
    if (CUSTOM_AI_ENDPOINT) {
      // Use custom AI endpoint
      response = await fetch(`${CUSTOM_AI_ENDPOINT}/virtual-tryon`, {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${AI_API_KEY}`,
        }
      })
    } else {
      // Use OpenAI DALL-E or similar service
      // Note: This is a simplified example - actual implementation would depend on the specific AI service
      const prompt = `Create a realistic virtual try-on image showing a person wearing ${productData.name}. The person should look natural and the clothing should fit properly. Style: photorealistic, high quality, professional fashion photography.`
      
      response = await fetch(`${AI_API_ENDPOINT}/images/generations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${AI_API_KEY}`,
        },
        body: JSON.stringify({
          prompt,
          n: 1,
          size: '1024x1024',
          quality: 'hd',
          style: 'natural'
        })
      })
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new Error(errorData.error?.message || `API request failed with status ${response.status}`)
    }

    const result = await response.json()
    
    // Process the response based on the API type
    let generatedImage, confidence, feedback
    
    if (CUSTOM_AI_ENDPOINT) {
      // Custom API response format
      generatedImage = result.generated_image_url || result.image_url
      confidence = result.confidence || 0.85
      feedback = result.feedback || {
        fit: 'Good fit detected',
        style: 'Style matches well',
        recommendations: ['Consider trying a different size for optimal fit']
      }
    } else {
      // OpenAI DALL-E response format
      generatedImage = result.data?.[0]?.url
      confidence = 0.90 // Default confidence for DALL-E
      feedback = {
        fit: 'AI-generated virtual try-on',
        style: 'Generated based on product description',
        recommendations: [
          'This is an AI-generated preview',
          'Actual fit may vary',
          'Consider your measurements when ordering'
        ]
      }
    }

    if (!generatedImage) {
      throw new Error('No image was generated by the AI service')
    }

    return {
      success: true,
      data: {
        image: generatedImage,
        confidence,
        feedback,
        processing_time: result.processing_time || 'N/A',
        model_used: result.model_used || 'AI Virtual Try-On'
      }
    }

  } catch (error) {
    console.error('Virtual try-on generation error:', error)
    
    // Return a more user-friendly error
    return {
      success: false,
      error: error.message || 'Failed to generate virtual try-on',
      fallback: {
        image: userPhoto, // Show original photo as fallback
        confidence: 0,
        feedback: {
          fit: 'Unable to analyze fit',
          style: 'AI processing failed',
          recommendations: [
            'Please try again later',
            'Check your internet connection',
            'Contact support if the issue persists'
          ]
        }
      }
    }
  }
}

// Analyze user photo for better try-on results
export const analyzeUserPhoto = async (photoData) => {
  try {
    // This would typically call an AI service to analyze the photo
    // For now, we'll return mock analysis data
    
    return {
      success: true,
      analysis: {
        body_type: 'average',
        pose_quality: 'good',
        lighting: 'adequate',
        background: 'suitable',
        recommendations: [
          'Photo quality is good for virtual try-on',
          'Clear view of upper body detected',
          'Good lighting conditions'
        ]
      }
    }
  } catch (error) {
    console.error('Photo analysis error:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// Get AI-powered style recommendations
export const getStyleRecommendations = async (userProfile, preferences = {}) => {
  try {
    // This would call an AI service for personalized recommendations
    // For now, return mock recommendations
    
    return {
      success: true,
      recommendations: [
        {
          id: 1,
          name: 'Classic White Shirt',
          reason: 'Versatile piece that works with your style',
          confidence: 0.92
        },
        {
          id: 2,
          name: 'Dark Wash Jeans',
          reason: 'Complements your body type',
          confidence: 0.88
        },
        {
          id: 3,
          name: 'Navy Blazer',
          reason: 'Perfect for your professional needs',
          confidence: 0.85
        }
      ]
    }
  } catch (error) {
    console.error('Style recommendations error:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

